{
    "sections": {
        "title": "Some new platforms for algebraic cryptography, and one method\nof increasing the security",
        "abstract": "In this paper it is discussed the possibility of using of\nthe categorical groupoids and the commutative operads in algebraic\ncryptography. It also introduces a general method of constructing of\nthe cryptographic protocols on the algebraic platforms. Under\ncertain reasonable assumptions, this method allows to get a new\nsufficiently cryptographically strong protocol using several other\nprotocols. Moreover, each of these protocols can be vulnerable.\nSufficient cryptographically strong means that the protocol will be\nprotected for some preassigned finite time.",
        "author": "A.R.\\,Gaynullina, S.N.\\,Tronin",
        "email": "GaynullinaAlina@gmail.com, sntrnn@gmail.com",
        "shorttit": "Some\nnew platforms",
        "keywords": "Algebraic cryptography, platform, cryptographic protocol,\nsecret key, key exchange, security, computational complexity, masked\ngroup, commutative operad, masked operad, algebra over an operad,\ntropical semiring",
        "introduction": "\\label{intro}\nIn our paper we have two main aims. The first aim is discussion two\nnew platforms for algebraic cryptography. Recall that the algebraic\nsystem (group, ring, field, etc.), elements of which are used in\ncryptographic protocols for the submission of some information and\nto process this information, is called {\\it the platform} in\nalgebraic cryptography (see \\cite{MSU}, \\cite{Rom}). Cryptographic\nprotocol is based on the computationally difficult problem. And\noften, this problem is the problem for the algebraic structure. The\nfirst new platform, which is offered in our paper, is the\ncategorical groupoids (see \\cite{Hig}, \\cite{Br}, \\cite{BHS}).\nApparently, earlier these objects not been used in cryptography. We\ndiscuss the categorical groupoids in Section \\ref{sec:2}. The second\nplatform, which is discussed in our paper, is the commutative\noperads. Commutative operad's platforms were introduced and\ninvestigated in our previous paper \\cite{GT1}. Section~\\ref{sec:3}\nof this paper can be considered as a continuation of \\cite{GT1}.\n\nThe second aim of our paper is description of a new method to\nimprove the cryptographic security. We call this method as {\\it\nmasking} of the algebraic system (for example, group, ring, field,\netc.), that is used as a platform. This method is described in\nSection~\\ref{sec:1}, and its specific implementations are described\nin Section~\\ref{sec:2} and \\ref{sec:3}. The method of masking of the\nalgebraic system allows for the following. Let us assume that we\nhave some specific protocol (the encryption, or the digital\nsignature protocol, or key exchange). And also assume that we want\nto modify this protocol so that it was unavailable for all possible\nattacks for some necessary us finite time. We will call it, for\ndefiniteness, {\\it the final protocol}. In fact, it is the final\nstage of the modified protocol. And in the first stages, there is\nperformed modification of used algebraic platform. As a result, the\noriginal public platform becomes a certain time public only to the\nprotocol's participants. Thus, it becomes the secret to outsiders.\nOf course, this is only possible under some assumptions, which\nappear to us reasonable. More detailed analysis of these assumptions\nwill be continued in our subsequent publications.\n\n\n",
        "conclusion": "",
        "acknowledgements": "",
        "main_part": [
            "\\label{sec:1}\nAt present, algebraic cryptography develops, mostly, on the basis of\ngroup theory (see, for example,  \\cite{MSU}, \\cite{Rom},\n\\cite{BFKR}, \\cite{VS}). Thus, we begin by discussing the case of a\ngroup platform.\n\n Let $G$ be a group with the multiplication $xy$ and\nwith the fixed element $c\\in G.$  We define a new multiplication on\nthe set $G$ by  $x\\cdot y=xcy.$ Then $(G, \\cdot)$ is a group with\nthe identity element $c^{-1}.$ The element $c^{-1}x^{-1}c^{-1}$ is\nthe inverse element of the element $x.$ Denote the resulting group\nby $G_c.$ We call it \\textit{a masked group with the masking\nelement}$c.$\nIt is known that $G\\cong G_c.$ This isomorphism is given by the\ncorrespondence $x\\mapsto c^{-1}x.$\nThe meaning of the transition from $G$ to $G_c$ for cryptography is\nas follows. Suppose we have some cryptosystem (encryption, or\ndigital signature, or creation of a common secret key) on the\nplatform of the group $G.$ Then there is a public description of the\ngroup $G,$ suitable for the deployment of $G$ elements in computer\nmemory, and for convenient processing of the data. The group's\nelements are usually represented by bit strings.\n\nTo be specific let us assume that the group $G$ is defined by a\nfinite set of generators and relations. At the same time, it is\nrequired that the elements of $G$ should have a normal form. The\nnormal form is the way of writing some element as a word composed of\nthe generators and their inverses. Moreover, different elements must\nhave different normal forms. Suppose that the fixed bit strings are\ncompared with generators and their inverses. Then the element in the\nnormal form is associated with string concatenation which\ncorresponds to multipliers. Multiplication of elements in the normal\nform involves two stages. In the first step two words are written to\neach other. This action corresponds to the concatenation of strings\nof the multipliers. In the second step the resulting word is\ntransformed into a normal form. Thus, there must be an algorithm\nthat processes arbitrary word, or more precisely, product of the\ngenerators and their inverses, into a normal form. This algorithm\nsolves the word problem. Moreover, this algorithm must be an\nefficient algorithm. It is known that only groups with algorithm of\nthis kind are suitable for cryptography.\n\nSuppose now that the protocol's participants created a shared secret\nmasking element, and also suppose that they implement the protocol\nin the masked group. This means that there are changed of the\nfollowing data: the normal form of the elements, relations and\nalgorithm for converting the words to the normal form. The masking\nelement becomes the secret parameters. Externally the coding method\nof generators by bit strings remains the same. However, the bit\nstrings corresponding to other elements are changed. An attacker\ndoes not know the element $c.$ At that method of changing is unknown\nto attacker. Note that not knowing $c,$ it is impossible to carry\nout any action in $G_c.$ Thus, an attack on the protocol is\nimpossible.\n\nLet $P$ be some auxiliary protocol of the creation the shared secret\nkey (or key exchange protocol). Then protocol's participants compute\nthe secret masking element $c$ using the protocol $P.$ Denote by\n$c=P(G)$ the result of the protocol $P.$\nWe accept the following assumption. Let $t$ be a runtime of the\nprotocol $P$(more precisely, the upper limit for all possible\nparticular implementations). Let us assume that there is an attack\nto $P,$ which allows to find $c.$ Also, assume that runtime of the\nattacking algorithm is not less than $T$ in all possible cases. Our\nmain assumption is the following inequality: $t<T.$ Let\n$\\Delta=T-t>0.$ Then it is possible to implement the following\ncyclic process:\n$$\n\\begin{array}{lll}\nStep~1. & c_1=P(G), & G_1=G_{c_1};\\\\\nStep~2. & c_2=P(G_1), &  G_2=(G_1)_{c_2};\\\\\n\\qquad\\vdots & \\qquad\\vdots & \\qquad\\vdots \\\\\nStep~n-1. & c_{n-1}=P(G_{n-2}), &  G_{n-1}=(G_{n-2})_{c_{n-1}};\\\\\nStep~n. & c_n=P(G_{n-1}). &\n\\end{array}\n$$\nNext the protocol is implemented in the masked group\n$(G_{n-1})_{c_n}.$\nAt each step of this cyclic process, the attacker lags behind for\nthe time $\\Delta.$ Thus, the attacker lags behind for the time\n$n\\Delta$ within $n$ steps. At that, protocol's participants may\nchoose the number $n$ arbitrarily large. The protocol of the\ncreation of a shared secret key includes a random selection of some\nparameters. Therefore, the attacker can not jump even through one\nstep. To find the final masking element, he will have to spend at\nleast time $Tn.$ Protocol's participants will compute the masking\nelement $c_n$ at most for the time $tn.$\nAs a result, it may take time, at least $\\Delta n,$ until the\nattacker can attack protocol. During this time, the protocol will be\nprotected. Thus, there is a theoretical possibility of constructing\ngood enough protocols even from the vulnerable components. In our\nunderstanding, good enough protocols are the protocols that provide\ncryptographic security for some end, but sufficiently long time, and\nthis time can be adjusted by the protocol's participants.\n\nThe question of when the condition $t<T$ is performed, will be\ninvestigated in our consequent papers. It is connected with the\nstudy of the lower limits of the complexity of some particular\nalgorithms. It is known that many secret key exchange protocols are\nbased on the complexity of these algorithms. Thus, it is expected\nthat the lower bounds of the complexity is also very considerable.\n\nSimilarly masking of groups, we can mask any associative ring $R$\nwith identity. Select the masking element $c$ in the group $U(R)$ of\ninvertible elements of the ring. Next, construct new masked ring\n$R_c,$ which coincides with $R$ as an Abelian group. But on $R_c$ we\ndefine new multiplication as $x\\cdot y=xcy.$\nAs a result, we again obtain an associative ring with identity\n$c^{-1},$ and $U(R_c)=U(R).$ Clearly, rings are isomorphic: $R\\cong\nR_c, x\\leftrightarrow c^{-1}x.$ Previous discussions for the groups\ncan be repeated almost word for word to the rings. More precisely,\nwe can provide sufficient cryptographic security of the protocols on\na platform some ``good'' rings. Possible requirements for rings are\nas follows. Firstly, the group $U(R)$ should be large enough, and\nsecondly, there must be a good algorithm for selecting a random\ninvertible element of a ring.\n\nTo increase the cryptographic security of cryptosystems on the\ngroup's platform, we can use more than one group, namely, the large\nparameterized family of groups. Let $I$ be some large family of\nparameters, and for any $i\\in I$ there is given the group $G(i).$ We\ncan assume that these groups generally known (not secret). Suppose\nnow that the protocol's participants choose in some way the shared\nsecret parameter $j\\in I.$ Then they will be able to perform the\nprotocol in the group $G(j).$ At that $G(j)$ will be an unknown to\nattacker. Of course, this will require some additional conditions.\nOne of these conditions may be as follows. Assume that there are\ngiven the group $G,$ and for any $i\\in I,$ the element $c_i \\in G.$\nThen $G(i)=G_{c_i}.$ The elements $c_i$ can be computed by some\nquite easy rule. For example, assume $I=\\{1,2,\\dots,m\\},$ and also\nassume that there is given the element $c\\in G,$ where the order of\n$c$ is strictly less than $m.$ Then we can put $c_i=c^i.$ So,\n$G(i)\\cong G$ for any $i,$ but multiplication in $G(i)$ is arranged\nas $x\\cdot y=xc_i y.$ Suppose we need to perform some protocol on\nthe platform $G.$ In this case, protocol's participants previously\nchoose the shared secret parameter $j\\in I,$ and then they perform\nprotocol in the group $G(j)=G_{c_j}.$ As noted above, attack on the\nprotocol can not, until the attacker computes $j,$ and finds $c_j.$\nHence, in particular, we obtain economical use of memory.\n\nWe can enhance the degree of protection as follows. Let originally\nthere is given a family of the public elements $c_j.$ Then for each\nof them there is applied the above cyclic process. Thus, we can get\nthe secret for attacker parameter $c^*_j.$ After that, all\nparameterized family $G^{*}(j)=G_{c^*_j}$ becomes the secret to the\nattacker. In order to exclude Brute-force search, the set $I$ should\nbe large. More specifically, if, for example, $c_j=c^j,$ then it is\nsufficient to apply the above cyclic process to the element $c.$ Put\n$c_1=c,$ and further continue as above. Of course, this is not the\nonly option to create difficulties for attacker. Difficulties in\nthis case are necessary to spend a lot of time before it will be\npossible to attack the final protocol. Again, we assume that the\nattacker can attack all parts of the upgraded protocol. And also\nassume that it attacks on every step of the protocol are slower than\nevery step of the protocol are performed.\n\n",
            "\\label{sec:2}\nIn this section, we describe another new platform for algebraic\ncryptography, namely, categorical groupoids. Note that the\ncategorical groupoids and the groupoids are different mathematical\nobjects. Recall some necessary definitions (see \\cite{MacLane}).\n\n\\begin{definition}\\label{D:1}\\rm{\\it A category} $K$ consists of the following data:\n\\begin{enumerate}\n\\item[1)] a class $Ob(K)$ of objects ($K$-objects);\n\\item[2)] for any two objects $i,j \\in Ob(K),$ a set\n$K(i,j)$ of morphisms with domain $i$ and codomain $j;$\n\\item[3)] for any object $i \\in Ob(K),$ an identity morphism $1_i: i\\rightarrow\ni;$\n\\item[4)] for any objects $i, j, k\\in Ob(K),$ and for any morphisms\n$\\alpha: i\\rightarrow j, \\beta: j\\rightarrow k,$ a function called\ncomposition $K(j,k)\\times K(i,j)\\rightarrow K(i,k),\n(\\beta,\\alpha)\\mapsto \\beta\\alpha.$ Call the morphism $\\beta\\alpha$\n{\\it the composition} of $\\beta$ and $\\alpha.$\n\\end{enumerate}\n\\end{definition}\nThe above data is required to satisfy the following associativity\nand unity axioms.\n\n\n \\textbf{Associativity.} Suppose $\\alpha:\ni\\rightarrow j, \\beta: j\\rightarrow k, l\\in Ob(K),$ and $\\gamma\\in\nK(k,l).$ Then there is an equality\n$\\alpha(\\beta\\gamma)=(\\alpha\\beta)\\gamma$ in $K(i,l).$\\textbf{Unity.} For any objects $i, j\\in Ob(K),$ there are\n equalities: $\\alpha 1_i=\\alpha=1_j\\alpha$ in $K(i,j)$ for\n all $\\alpha \\in K(i, j).$\nWe do not assume that the reader has any prior knowledge of category\ntheory. The book \\cite{MacLane} have all the category theory that we\nwill need in this paper.\n\nFor example, a monoid is a category $K$ with one object $i,$ and\nwith a set $K(i,i)$ of morphisms.\n\n\\begin{definition}\\label{D:2}\\rm\nTwo objects $i$ and $j$ are {\\it isomorphic} in the category $K$ if\nthere are the morphisms $\\alpha: i\\rightarrow j, \\beta: j\\rightarrow\ni$ such that $\\beta\\alpha=1_i,$ and $\\alpha\\beta=1_j.$ Morphisms\n$\\alpha, \\beta$ are called {\\it isomorphisms}; we write\n$\\beta=\\alpha^{-1}.$\n\\end{definition}\\begin{definition}\\label{D:3}\\rm\nIf $A$ and $B$ are categories, then {\\it a functor} $F$ from $A$ to\n$B$ is a function that assigns to each $A$-object $i$ a $B$-object\n$F(i),$ and to each $A$-morphism $f: i\\rightarrow j$ a $B$-morphism\n$F(f): F(i)\\rightarrow F(j),$ in such a way that\n\\begin{enumerate}\n\\item[1)] $F$ preserves composition; i.e., $F(f g)=F(f)F(g)$\n whenever $fg$ is defined, and\n\\item[2)] $F$ preserves identity\nmorphisms; i.e., $F(1_i) = 1_{F(i)}$ for each $A$-object $i.$\n\\end{enumerate}\n\\end{definition}\\begin{definition}\\label{D:4}\\rm\nA category whose objects form a set and in which every morphism is\nan isomorphism is called a categorical {\\it groupoid}.\n\\end{definition}\nFor brevity, we use ``a groupoid'' instead of ``a categorical\ngroupoid''. For example, a group, regarded as a category with one\nobject, is also a groupoid. Groupoids similar to parameterized set\nof groups from Section~\\ref{sec:1}. Indeed, if $K$ is groupoid, then\nfor any object $i$ the set $K(i,i)=K(i)$ is group under composition\nof morphisms.\n\nNote that if there is morphism $\\alpha: i\\rightarrow j$ then we\nprovide an isomorphism between $K(i)$ and $K(j)$ as follows:\n$\\gamma\\mapsto\\alpha\\gamma\\alpha^{-1},$ where $\\gamma: i \\rightarrow\ni$ and $\\alpha\\gamma\\alpha^{-1}: j \\rightarrow j.$ Furthermore,\nthere is an one-to-one correspondence between $K(i,i)$ and $K(i,j):$$\\gamma\\mapsto\\alpha\\gamma,$ where $\\gamma: i \\rightarrow i$ and\n$\\alpha\\gamma: i \\rightarrow j.$\nThe groupoid's theory can be found in \\cite{Hig}, \\cite{Br},\n\\cite{BHS}. At present, the groupoids are used mainly in algebraic\ntopology.\n\n\\begin{definition}\\label{D:5}\\rm\nA groupoid $K$ is called {\\it connected} if $K(i, j)$ is non-empty\nfor all objects $i, j$ of $K.$ \\end{definition}\\noindent Further we consider only connected groupoids.\n\nLet us describe an example of a groupoid, which can be used in\ncryptography. Let $G$ be a group, and let $I$ be a set. The elements\nin the set $I$ are called the objects of groupoid $K.$ Assume\n$K(i,i)=G$ for any $i, j.$ Take the element $c_i\\in G$ for any $i\\in\nI.$ Then for $\\alpha: i\\rightarrow j, \\beta: k \\rightarrow i,$ we\ncan define the composition by $ \\alpha\\beta=\\alpha c_i\\beta. $ Note\nthat on the right-hand side of this equality there is the product in\nthe group $G.$ It is easy to verify that in this case the properties\nof category are performed, and $1_i=c^{-1}_{i}.$ Clearly, $\n\\alpha^{-1}=c_{i}^{-1}\\alpha^{-1}c_{j}^{-1}. $ Therefore, this\ncategory is a groupoid.\n\nThe described groupoid is suitable for use in cryptography. Let us\nconsider the following example. Assume that we want to modify\n(increase cryptographic security) some final protocol, which was\noriginally defined in the group platform. We transfer this protocol\nto groupoid's platform. Public data are the group $G$ and the set of\nelements $c_i \\in G, i \\in I,$ where $I$ is a large set. Hence there\nis defined the groupoid $K,$ and it is public. We assume for\nsimplicity that $c_j=c^j, I=\\{1,2,\\dots,m\\}$ for some large $m,$ and\nalso assume that the order of $c\\in G$ is less than $m.$ Firstly,\naccording to the cyclic process from Section~\\ref{sec:1}, we obtain\nfrom $c_1=c$ the secret element $c^*=c_n.$ Then\n$c^{*}_{j}=(c^{*})^j,$ and new groupoid $K^*$ is constructed using\nthese data as above. All compositions of morphisms in the groupoid\n$K^*$ are known only to the protocol's participants. Hence this\ngroupoid is not public. At the same time, the attacker spends much\ntime to compute the element $c^*.$\nThe next step of the modified protocol is to select of the public\nobject $i,$ the common secret object $j,$  and the common secret\nmorphism $\\alpha: i\\rightarrow j.$ This is done using some protocols\nof selection share secret key.\n\nThen the protocol's participants use the group\n$K^{*}_{i}=K^{*}(i,i),$ and generate input data for the final\nprotocol. And then they publish such of them, which are public. Note\nthat if in the protocol there are hash function, or some other\nfunction defined on the group $G,$ or with values in $G,$ then these\nfunctions are trivially redefined as follows. Group $G$ is replaced\nto a group $K(i,i)$(or $K(j,j)$). This is the same group.\n\nNext, if $g$ is some public (or secret) element of $K^{*}(i,i),$\nthen it is mapped to $K^{*}(j,j)$ by isomorphism $g\\mapsto \\alpha g\n\\alpha^{-1}.$\nAs $\\alpha$ is secret, then initial public element $g$ is mapped to\nan element that is known only by the protocol's participants. As a\nresult, all group data of original protocol are isomorphic mapped to\nthe secret group $K^{*}(j,j)$ using a secret isomorphism. Thus, data\ninitially public to an attacker are minimized. Of course, we assume\nthat each pick of a shared secret key can be attacked. But we also\nassume that the attack time is longer than the execution time of the\nprotocol.\n\nAt the last step of the modified protocol, the final protocol is\nperformed in the group $K^{*}(j,j),$ and most of the initial data\n(including the group structure) are known only by the protocol's\nparticipants.\n\nThus, from a few protocols, namely, one final protocol and few\nprotocols of key exchange, we can assemble a new protocol. This\nprotocol solves the same problem as the final protocol, but it has\nsome certain guarantees of cryptographic security. These guarantees\nwill be valid, even if all protocols which made the assembly, are\nattackable to some extent.\n\nAbove we constructed a groupoid using the group $G$ and the set of\nits elements $c_x, x\\in X.$ Denote this groupoid by $(G; X;\n\\{c_x|x\\in X, c_x\\in G\\}).$\\begin{theorem}\\label{Th:1}\nLet $\\mathcal{G}$ be a connected groupoid, and let\n$X=Ob(\\mathcal{G})$ be a set. Then $\\mathcal{G}$ is isomorphic to\nthe groupoid $\\mathcal{G}_0=(G; X; \\{c_x|x\\in X, c_x\\in G\\}).$\n\\end{theorem}\\begin{proof}\nLet us fix $x_0\\in X.$ Assume that $G=\\mathcal{G}(x_0, x_0).$ For\nany $x\\in X$ pick $b_x: x_0\\rightarrow x,$ and $a_x: x\\rightarrow\nx_0.$ Let $c_x=a_x b_x.$\n\nWe construct the functor $\\Phi: \\mathcal{G}_0\\rightarrow\n\\mathcal{G}.$ This functor maps any object $x$ to $x$, $\\Phi(x)=x.$\n\nLet $g: x\\rightarrow y$ be a morphism of $\\mathcal{G}_0(x,y).$ In\nfact, it is an element of $G.$ The map\n$\\mathcal{G}_0(x,y)\\rightarrow \\mathcal{G}(x,y), g\\mapsto\\Phi(g)$ is\nconstructed as $\\Phi(g)=b_y g a_x.$ Let us prove that $\\Phi$ is\nfunctor. Assume that $g: x\\rightarrow  y, h: z\\rightarrow x$ are\nmorphisms of $\\mathcal{G}_0.$ In fact, $g,h \\in G.$ Then $g\\cdot h:\nz\\rightarrow y$ is $gc_xh=ga_xb_xh.$ Clearly, $\\Phi(g\\cdot\nh)=\\Phi(ga_x b_x h)=b_yga_xb_xha_z,$\n$\\Phi(g)\\Phi(h)=(b_yga_x)(b_xha_z).$ Thus, $\\Phi(g\\cdot\nh)=\\Phi(g)\\Phi(h).$\n\nIdentity morphism of object $x$ in $\\mathcal{G}_0$ is\n$c^{-1}_{x}=b^{-1}_{x}a^{-1}_{x}.$ Then\n$\\Phi(b^{-1}_{x}a^{-1}_{x})=b_x(b^{-1}_{x}a^{-1}_{x})a_x=1_x$ is\nidentity morphism of object $x$ in $\\mathcal{G}.$\n\nThus, the functor $\\Phi$ is constructed.\n\nInverse functor $\\Psi: \\mathcal{G}\\rightarrow \\mathcal{G}_0$ also\nmaps the objects in themselves. The map $\\mathcal{G}(x,y)\\rightarrow\n\\mathcal{G}_0(x,y), u\\mapsto\\Psi(u)$ is constructed as:\n$\\Psi(u)=b^{-1}_{y}u a^{-1}_{x}.$\n\nClearly, this map is inverse to constructed above map $\\Phi.$ Verify\nthat if $u: x\\rightarrow y, v: z\\rightarrow x$ are morphisms of\n$\\mathcal{G},$ then $\\Psi(uv)=\\Psi(u)\\cdot\\Psi(v)=\\Psi(u)c_x\n\\Psi(v).$\n\nIndeed, $\\Psi(uv)=b^{-1}_{y}uv a^{-1}_{z},$ $\\Psi(u)c_x\n\\Psi(v)=(b^{-1}_{y}u a^{-1}_{x})a_x b_x(b^{-1}_{x}v a^{-1}_{z}),$\n$\\Psi(1_x)=b^{-1}_{x}1_x a^{-1}_{x}=c^{-1}_{x}.$\n\\end{proof}\\begin{consequence}\\label{Cons:1} Any connected groupoid is isomorphic to the groupoid\nof type $(G; X; {c_x}),$ where $c_x=1_G$ is identity element of\ngroup $G$ for any $x.$ \\end{consequence}",
            "\\label{sec:3}\nIn \\cite{GT1} we show the use of commutative operads in public-key\ncryptography. Assume that the definitions, the notations, and the\nterminology of \\cite{GT1} are known. The general theory of operads\ncan be found, for example, in \\cite{MSS}, \\cite{LV}, \\cite{BD}.\nCommutative operads were introduced and investigated in \\cite{Tr1}\nand \\cite{Tr2}. In \\cite{Gayn1} it were studied one class of\ncommutative operads, namely, the operads of multidimensional cubes\nin Euclidean spaces and their generalization.\n\nLet $R$ be an operad. Then $R(1)$ is a semigroup with an identity\nelement. Take some invertible element $c\\in R(1).$ Then we can\nconstruct the masked operad $R_c$ analogously to the masked groups\nin Section~\\ref{sec:1}. Namely, we introduce a new operad\ncomposition:\n$$\n\\begin{array}{c}\nR_c(m)\\times R_c(n_1)\\times \\dots \\times R_c(n_m)\\rightarrow\nR_c(n_1+\\dots+n_m), \\\\ (w,w_1,\\dots,w_m)\\mapsto[ww_1\\dots w_m]_c.\n\\end{array}\n$$\n Assume\n$[ww_1\\dots w_m]_c=w(cw_1)\\dots(cw_m)=(w\\underbrace{c\\dots\nc}_m)w_1\\dots w_m. $\\begin{theorem}\\label{Th:1}\n$R_c$ with the operation of composition {\\rm (1)} is an operad. The\nelement $c^{-1}\\in R(1)$ is the identity element of this operad. If\nthe operad $R$ is commutative, then the operad $R_c$ also is\ncommutative. The operads $R$ and $R_c$ are isomorphic. Isomorphism\nis given by the set of mappings $\\psi_n:R(n)\\rightarrow R_c(n),\n\\psi_n(w)=cw.$\n\\end{theorem}\\emph{Remark.} The expression $cw$ is the result of operadic\ncomposition $R(1)\\times R(n)\\rightarrow R(n).$ The expression\n$wc\\dots c$ is the result of operadic composition $R(m)\\times\nR(1)\\times \\dots\\times R(1)\\rightarrow R(m).$\\begin{proof} By definition.\n\\end{proof}\nLet $A$ be {\\it an algebra} over the operad $R.$ It means (see\n\\cite{GT1}) that for all $n\\geq 0$ a set $A$ is endowed with some\nmappings of the form:\n$$\nR(n)\\times A^n\\rightarrow A,\\qquad  (w,a_1,\\dots,a_n)\\mapsto w\na_1\\dots a_n,\n$$\n that satisfy certain properties \\cite{GT1}.\n\nLet us construct the masked algebra $A_c$ over the operad $R_c$ as\nfollows. Let $A_c=A$ as a set. We determine the operations of\ncomposition as follows:\n$$\nR_c(n)\\times A_{c}^{n}\\rightarrow A_c, \\quad\n(w,a_1,\\dots,a_n)\\mapsto[w a_1\\dots a_n]_c,\n$$\n where\n$$\n[w a_1\\dots a_n]_c=w(ca_1)\\dots(ca_n)=(wc\\dots c)a_1\\dots a_n.\n \\eqno{\\rm (1)}\n $$\\begin{theorem}\\label{Th:2}\nThe operations {\\rm (1)} determine the structure of an algebra over\nthe operad $R_c$ on $A_c.$ The varieties $\\textrm{Alg}(R)$ and\n$\\textrm{Alg}(R_c)$ are rationally equivalent (see\n\\cite[Definition~1.2.2, p.~26]{Pin}). If $F:\n\\textrm{Alg}(R)\\rightarrow \\textrm{Alg}(R_c)$ is the functor that\nimplements the equivalence, then $F$ is constructed as $F(A)=A_c.$\n\\end{theorem}\\begin{proof} Direct verification.\n\\end{proof}\nNow we can apply the method of Section~\\ref{sec:1} to increase the\ncryptographic security for all protocols from \\cite{GT1}. This\nmethod works, if the group of invertible elements $R(1)$ is large\nenough. This eliminates the possibility of iterate of the masking\nelements.\n\nAssume ${Z}=\\{Z(n)|n \\ge 1\\}$, where $Z(n)=K^n$.\n An element $Z(n)$ is a sequence (string)\n$\\bar{x}=(x_1,\\ldots,x_n)$ of elements $x_i\\in K$. The action of an\nelement $g\\in K$ on the string $\\bar{x}$ is defined as follows\n$g\\bar{x}=(g x_1,\\ldots,  g x_n).$ The composition in this operad is\ndefined as follows:\n$$\nZ(m)\\times Z(n_1)\\times \\cdots \\times Z(n_m)\\rightarrow\nZ(n_1+\\cdots+n_m),$$$$(\\bar{x}, \\bar{y}_1, \\ldots ,\n\\bar{y}_m)\\mapsto \\bar{x}\\, \\bar{y}_1 \\dots  \\bar{y}_m,\n$$\\noindent\n where $\\bar{x}=(x_1, \\ldots, x_m)\\in R(m), \\quad$$\\bar{y}_i=(y_{i,1},\\ldots, y_{i,n_i})\\in R(n_i)$ for all $1\\le i\\le\nm,$\n and $\\bar{x}\\, \\bar{y}_1 \\dots  \\bar{y}_m =\n(x_1\\bar{y}_1, \\ldots, x_m\\bar{y}_m),$$x_i\\bar{y}_i=(x_i y_{i,1},\n\\dots, x_iy_{i,n_i}).$\nThe permutation group $\\Sigma_n$ acts on a set $Z(n)$ as follows:\n$(x_1,\\ldots, x_n)\\sigma =(x_{\\sigma(1)}, \\dots, x_{\\sigma(n)}).$\nExample of an $R$-algebra from \\cite{GT1} is generalized as follows.\nLet $K$ be an associative commutative ring or semiring, $Z$ be a\ncommutative operad.\n\nConsider an arbitrary suboperad $R$ of operad $Z$, and determine the\nstructure of $R$-algebra on $A=K^m.$ Let $k_1, \\ldots, k_m$ be a\nfixed positive integers, $y_1, \\ldots, y_m\\in K.$ We define the\nmappings:\n$$\nR(n)\\times A^n\\longrightarrow A, \\qquad \\xi a_1 \\dots a_n= (b_1,\n\\ldots, b_m),\n$$\nwhere $\\xi=(x_1, \\ldots, x_n) \\in R(n)$, $a_i=(a_{1,i}, \\ldots,\na_{m,i})$, $1 \\le i \\le n,$ and\n$$\nb_i=\\mathop{\\sum}\\limits_{j=1}^n \\, a_{i, j}x_j^{k_i} y_i \\eqno{\\rm\n(2)}\n$$\nfor all $i$, $1\\le i \\le m.$\\begin{lemma}\\label{Lem:1}\nThe equality {\\rm (2)} defines the structure of $R$-algebra on\n$A^m.$\n\\end{lemma}\\begin{proof}\nBy definition.\n\\end{proof}\nDenote this algebra by $A(k_1,\\dots, k_m; y_1, \\dots, y_m),$ or\nbriefly, by $A(\\{k_i\\}; \\{y_i\\}).$\nNext, let us recall Protocol 1 from \\cite{GT1}. Recall also that\n${\\mathop{\\sum}\\limits_{i=1}^n}{}^{(\\xi)}\\,a_i= \\xi a_1\\dots a_n.$\\vspace{3mm}\\noindent{\\bf Protocol 1. The creation of a shared secret key}\nAlice's secret is a $\\omega\\in R(n).$ Bob's secret is a $\\lambda\\in\nR(m).$ Public elements are $a_{i,j}\\in A,$$1\\le i\\le n,$$1\\le j\\le\nm.$\\begin{enumerate}\n\\item[1)] Alice computes\n$\\alpha_j={\\mathop{\\sum}\\limits_{i=1}^n}{}^{(\\omega)}\\, a_{i,j}$,\n$1\\le j \\le m.$\n\\item[2)] Bob computes\n$\\beta_i={\\mathop{\\sum}\\limits_{j=1}^m}{}^{(\\lambda)}\\,$ $a_{i,j}$,\n$1\\le i \\le n.$\n\\item[3)] Alice sends the elements\n$\\alpha_j$ to Bob.\n\\item[4)] Bob sends the elements $\\beta_i$ to Alice.\n\\item[5)] Finally, Alice computes\n${\\mathop{\\sum}\\limits_{i=1}^n}{}^{(\\omega)}\\, \\beta_i$, and Bob\ncomputes ${\\mathop{\\sum}\\limits_{j=1}^m}{}^{(\\lambda)}\\, \\alpha_j.$\n\\end{enumerate}\nBy definition of a commutative operad,\n${\\mathop{\\sum}\\limits_{i=1}^n}{}^{(\\omega)}\\,{\\mathop{\\sum}\\limits_{j=1}^m}{}^{(\\lambda)}\\,\na_{i,j}=\n{\\mathop{\\sum}\\limits_{j=1}^m}{}^{(\\lambda)}\\,{\\mathop{\\sum}\\limits_{i=1}^n}{}^{(\\omega)}\\,\na_{i,j}$.  Thus, Alice and Bob receive a shared secret key.\n\nThe security of Protocol 1 is based on the complexity of the task of\nfinding $\\xi\\in R(k)$ using known $b_1, \\ldots, b_k\\in A $ and\n${\\mathop{\\sum}\\limits_{i=1}^k}{}^{(\\xi)}\\, b_i\\in A.$\nNext, we need a generalization \\cite[Example 7]{GT1}, where the\noperad $R$ is based on the tropical semiring $K.$ Recall that in\nthis case, $K=\\mathbb{Z}$ as a set, addition is defined by $a\\oplus\nb=\\min(a,b),$ and multiplication is defined by $a\\odot b=a+b.$ Note\nthat $0$ is the unit of this semiring, and $\\infty$ is its zero.\nTropical semiring was first used in cryptography in \\cite{Grig1}.\n\nAccording to \\cite[Theorem 2]{GT1}, the cryptographic security of\nProtocol 1 for $A=A(\\{k_i\\}; \\{y_i\\})$ depends on the complexity of\nsolving a large system of equations of the type\n$$\n\\left\\{\n\\begin{array}{ccccccc}\n(a_{1,1}\\odot x_1^{\\odot k_1})\\odot y_1 & \\oplus & \\cdots &\n\\oplus & (a_{1,n}\\odot x_n^{\\odot k_1})\\odot y_1 & = & b_1; \\\\\n\\ldots & & \\ldots & & \\dots & & \\ldots \\\\\n (a_{m,1}\\odot x_1^{\\odot k_m})\\odot y_m & \\oplus & \\cdots &\n \\oplus & (a_{m,n}\\odot x_n^{\\odot k_m})\\odot y_m & = & b_m.\n\\end{array}\n\\right.\n %\\eqno{\\rm (3)}\n $$\nover the tropical semiring $K.$\nIn the standard notation, system (3) is as follows:\n$$\n\\left\\{\n\\begin{array}{ccccccc}\n\\min\\limits_{1\\leq i \\leq n}(a_{1,i}+k_1 x_i+ y_1) & = & b_1; \\\\\n\\ldots & & \\ldots\\\\\n\\min\\limits_{1\\leq i \\leq n}(a_{m,i}+k_m x_i+y_m) & = & b_m.\n\\end{array}\n\\right.\n %\\eqno{\\rm (3a)}\n $$\nSuppose that the group of invertible elements of the semigroup\n$R(1)$ enough large. Then we have a possibility to mask the operad\n$R$ and the algebra $A(\\{k_i\\}; \\{y_i\\}).$ How to do it for the\noperad, is described above.\n\nIn the case of an algebra, we need to do all parameters $k_1,\n\\ldots, k_m,$$y_1, \\ldots, y_m$ the secret. This is done using some\nprotocol of selection of the shared secret key.\n\nWe take the masking element $c\\in R(1)=\\mathbb{Z}.$ Then the\ncomposition in $R_c$ takes the form:\n$$R_c(m)\\times R_c(n_1)\\times \\dots \\times R_c(n_m)\\rightarrow R_c(n_1+\\dots+n_m),$$$$(w,u_1,\\dots,u_m)\\mapsto[wu_1\\dots u_m]_c,$$\nwhere $w=(w_1,\\dots,w_m), u_i=(u_{i,1},\\dots,u_{i,n_i}).$\nWe have\n$$\n[wu_1\\dots u_m]_c=\n(w_1\\odot c\\odot u_{1,1},\\dots,w_1\\odot c\\odot u_{1,n_1}, w_2\\odot\nc\\odot u_{2,1},\\dots,w_2\\odot c\\odot u_{2,n_2},\\dots)\n$$\nNote that the equality $w_i\\odot c\\odot u_{i,j}=w_i+c+u_{i,j}$ is\ntrue in the semiring $K.$\nAlgebra $A_c$ is given by the following map:\n$$R_c(n)\\times A_{c}^{n}\\rightarrow A_c, \\quad\n(w,a_1,\\dots,a_n)\\mapsto[wa_1\\dots a_n]_c.$$\nAssume that $w=(w_1,\\dots,w_n), a_i=(a_{1,i},\\dots,a_{m,i}), 1\\leq i\n\\leq n.$ Then $[wa_1\\dots a_n]_c=(z_1,\\dots,z_m)\\in A_c=K^m,$ and\n$$z_j=a_{j,1}\\odot c^{\\odot k}\\odot w_{1}^{\\odot k} \\oplus\n\\cdots \\oplus a_{j,n}\\odot c^{\\odot k}\\odot w_{n}^{\\odot k},\n$$\nwhere $1\\leq j \\leq m.$\nIn the case of $A=A(\\{k_i\\}; \\{y_i\\}),$ we get the following result.\n\n\\begin{theorem}\\label{Th:3} The cryptographic security of Protocol 1 for the\noperad $R_c$ and for the algebra $A(\\{k_i\\}; \\{y_i\\})$ depends on\nthe complexity of solving a system of tropical equations of the\ntype:\n$$\n\\bigoplus\\limits_{j=1}^{n}(a_{i,j}\\odot c^{\\odot k_i}\\odot\nx_{j}^{\\odot k_i}\\odot y_i)=b_i, \\eqno{\\rm (3)}\n$$\nwhere $x_1,\\dots, x_n$, $k_1,\\ldots, k_m$, $y_1, \\ldots, y_m$, and\n$c$ are unknown.\n\nIn the standard notation, system (3) is as follows:\n$$\n\\mathop{\\min}\\limits_{1\\leq j\\leq n}(a_{i,j}+ k_i c+ k_i x_{j}+\ny_i)=b_i\n \\eqno{\\rm (4)}\n$$\n\\end{theorem}\\label{Th:3}\\begin{proof}\nBy definition and by \\cite[Theorem 2]{GT1}.\n\\end{proof}\nNote that, in the general case, the systems of equations (3), (4)\nare a significantly nonlinear. Their left-hand sides are not even\npolynomial. We are not aware the methods for solving systems of\nequations of this type. Thus, we expect that Protocol 1 on the\ntropical semiring has sufficient cryptographic security.\n\n\n"
        ]
    },
    "errors": []
}