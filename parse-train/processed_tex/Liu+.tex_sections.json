{
    "sections": {
        "title": "Downward Density of Exact Degrees",
        "abstract": "In this paper we study exact d.c.e. degrees, the class of\nd.c.e. degrees which is strictly between the class of degrees of\ntops of bubbles and the class of isolated d.c.e. degrees. We show\nthat exact degrees are downward dense similar to isolated d.c.e.\ndegrees.",
        "author": "J.\\,Liu$^*$, G.\\,Wu$^{**}$\\and M.\\,Yamaleev$^{***}$",
        "email": "$^*$liujiang@cigit.ac.cn, $^{**}$guohua@ntu.edu.sg, $^{***}$mars.yamaleev@kpfu.ru",
        "shorttit": "Downward Density",
        "keywords": "Erhsov's hierarchy, d.c.e. sets, Lachlans' sets,\nexact degrees",
        "introduction": "\nThe differences of computably enumerable (further, d.c.e.) sets gives a natural generalization of computably\nenumerable (further, c.e.) sets, which are one of the central objects in Computability Theory. The structures of\nTuring degrees of c.e. and d.c.e. sets are studied during last several decades and nowadays we know a lot of\nparticular properties of these structures, but there are still several basic open problems related to their\nmodel-theoretical properties.\n\nArslanov, Kalimullin and Lempp \\cite{AKL:2010} showed that there exists a bubble pair in the class of d.c.e.\nTuring degrees. Using this notion and its generalization they refused the Downey's Conjecture showing that\npartial orders of d.c.e. and 3-c.e. Turing degrees are not elementarily equivalent. Recall that d.c.e. degrees\n${\\bf 0}<{\\bf b} < {\\bf a}$ form a bubble pair if all d.c.e. degrees below ${\\bf a}$ are comparable with ${\\bf\nb}$, also we say that ${\\bf b}$ is the middle of bubble and ${\\bf a}$ is the top of bubble. It's easy to see\nthat ${\\bf a}$ is always d.c.e. and it was proved in \\cite{AKL:2010} that ${\\bf b}$ must be c.e. This bubble\npair phenomena is an essence of properly d.c.e. degrees and has many nontrivial properties. For example, it's\neasy to see that ${\\bf a}$ is an exact d.c.e. degree (see \\cite{Ishmukhametov:99}), in particular it's an\nisolated degree (see, e.g. \\cite{Wu:2002}), also it's easy to see that ${\\bf a}$ is not splittable avoiding the\nupper cone of ${\\bf b}$(see \\cite{Cooper.Li:2002}).\n\n\nThe construction of a bubble is a highly nontrivial task and it's interesting whether it can be combined with\nother properties, like upward or downward density in the c.e. degrees. The positive answer for density question\nin the c.e. degrees allows to distinguish c.e. degrees in the class of d.c.e. degrees. Indeed, if between any\ntwo c.e. degrees ${\\bf e} < {\\bf c}$ there is a bubble then the middle of the bubble is also between them.\nHence, for any c.e. degree ${\\bf c}$ it has a nontrivial c.e. splitting ${\\bf c_0} \\cup {\\bf c_1} = {\\bf c}$ and\nthere is a middle of bubble in the intervals $[{\\bf c_0}, {\\bf c}]$ and $[{\\bf c_1}, {\\bf c}]$. On the other\nhand, if ${\\bf d}$ is a properly d.c.e. degree and if ${\\bf d_0} \\cup {\\bf d_1} = {\\bf d}$ is a nontrivial\nsplitting in the d.c.e degrees then either $[{\\bf d_0}, {\\bf d}]$ or $[{\\bf d_1}, {\\bf d}]$ doesn't contain a\nc.e. degree. Therefore, it doesn't contain middle of bubble, contrary to the c.e. case above.\n\nHowever, the interaction of the original bubble construction and permitting argument provides many difficulties.\nHence, even downward density for bubbles is under question. Our approach is to consider different properties of\nbubbles separately. Namely, the exact degrees, introduced by Ishmukhametov \\cite{Ishmukhametov:99}, form the\nclass of d.c.e. degrees which extend the class of tops of bubbles. So, the question on density, particularly\ndownward and upward density, can be naturally asked for this class. Also the density questions are well studied\nfor the class of isolated d.c.e. degrees which extend the class of exact degrees. However, the nature of\nconstructions of isolated degrees and exact degrees doesn't allow to transfer the results from isolated degrees\ninto exacts degrees. Using some modifications we show in the main theorem that exact d.c.e. degrees are downward\ndense. We left open the following questions.\n\n\\begin{ques} Are bubble pairs downward dense?\n\\end{ques}\\begin{ques} Are exact degrees upward dense? \\end{ques}\nFor a d.c.e. set $D$ and its enumeration $\\{D_s\\}_{s \\in \\omega}$\nsuch that $|D_s - D_{s-1}| \\leq 1$, we define p.c. function $s^D(x)$\nsuch that $s^D(x) \\downarrow = s$ if and only if  $x$ is enumerated\ninto $D$ at stage $s$. If later $x$ is extracted from $D$ then\n$s^D(x)$ is enumerated into its \\emph{Lachlan's set}$L(D) = \\{ s |\n\\ \\exists x \\ s^D(x) \\downarrow = s \\ \\ \\& \\ x \\not \\in D \\}$. Let\n${\\bf d} =\\text{deg} (D)$, then $L[{\\bf d}] = \\{ \\text{deg} (L(B)) |\n\\ B \\in {\\bf d} \\ \\ \\text{and} \\ \\ B \\ \\text{is d.c.e.}\\}$, elements\nof $L[{\\bf d}]$ we call \\emph{Lachlan's degrees} of ${\\bf d}$. In\n\\cite{Ishmukhametov:99}, Ishmukhametov defined $R[{\\bf d}]$ as the\nset of all degrees below ${\\bf d}$, in which ${\\bf d}$ is relatively\ncomputable enumerable. It's easy to show that $R[{\\bf d}] = L[{\\bf\nd}]$(see, e.g. \\cite{FangWuYam:2013}). Following\n\\cite{Ishmukhametov:99}, a noncomputable d.c.e degree ${\\bf d}$ is\n\\emph{exact} if $|L[{\\bf d}]| = 1$. Now we proceed to the proof of\nthe main result. Our notation and terminology generally follow Soare\n\\cite{Soare}, for some special definitions we refer to\n\\cite{FangWuYam:2013}, \\cite{Ishmukhametov:99}.\n\n\n",
        "conclusion": "",
        "acknowledgements": "",
        "main_part": [
            "\\begin{theorem}\\label{main theorem} Below any noncomputable c.e. degree ${\\bf a}$ there exists an exact d.c.e. degree ${\\bf d}$.\\end{theorem}\\subsection{Requirements}\nGiven a c.e. set $A\\in \\mathbf a$ with a computable enumeration\n$\\{A_s\\}_{s\\in\\omega}$, we construct a noncomputable d.c.e. set $D$\nsuch that $D\\leq_T A$ and $L(B)\\equiv_T L(D)$ for any d.c.e. set\n$B\\equiv_T D$. So it suffices to build a d.c.e. set $D$ and\nfunctionals $\\Delta_{e}$ and $\\Gamma_e$ satisfying the following\nrequirements:\n\n\\begin{description}\n\\item[$\\mathcal{G}$] $D\\leq_T A$,\n\n\\item[$\\mathcal{R}_{e}$] $D=\\Phi_e^{B_e}~\\&~B_e =\\Psi_e^D  \\Rightarrow \\exists \\ \\Delta_e ( L(D)=\\Delta_{e}^{L(B_e)})$,\n\n\\item[$\\mathcal{S}_e$] $W_e=\\Theta_e^D\\Rightarrow \\exists \\ \\Gamma_e ( W_e=\\Gamma_e^{L(D)})$,\n\n\\item[$\\mathcal{P}_{e}$] $L(D)\\neq \\Omega_e$,\n\\end{description}\\noindent where $\\{\\langle W_e, B_e, \\Phi_e, \\Psi_e, \\Omega_e\\rangle\n \\}_{e\\in\\omega}$ is an effective enumeration of all corresponding\n5-tuples of c.e. and d.c.e. sets and p.c. functionals. Note that the $\\mathcal S$-requirements indicate that\n$L(D)$ has the greatest c.e. degree below $\\mathbf d$, so it isolates $D$. On the other hand, the $\\mathcal\nR$-requirements indicate that $L(D)$ has the least c.e. degree among all Lachlan degrees of d.c.e. sets from the\ndegree $\\text{deg}(D)$. At the same time, $\\mathcal P$-requirements ensure that $\\text{deg}(L(D))$ is not\ncomputable, hence $\\text{deg}(D)$ is an exact d.c.e. degree.\n\n\n\\subsection{Strategies}\\\n{\\bfseries Basic $\\mathcal P$-strategy}. The basic idea of a $\\mathcal P$-strategy, say $\\pi$, is the following.\nFirst of all, $\\pi$ respects the global requirement $D\\leq_T A$ and uses direct permitting argument. That is,\nwhenever $\\pi$ puts or extracts a number from $D$ there is the corresponding $A$-change. So, $\\pi$ picks step by\nstep an increasing sequence of numbers $x_0<x_1 < \\dots < x_n < \\dots$ and waits for an $A$-permission in order\nto put one of them into $D$. If it never gets an $A$-permission, then $A$ is computable, which contradicts with\nthe assumption of the theorem. Suppose $\\pi$ enumerates some $x$ into $D$ at stage $s$. To make $L(D)\\neq\n\\Omega_e$, $\\pi$ chooses such $s$ and waits for $\\Omega_e(s)\\downarrow=0$. If $\\Omega_e(s)\\downarrow=0$, then\n$\\pi$ may extract $x$ from $D$(and force $s$ entering $L(D)$) making $L(D)(s)=1 \\neq 0 = \\Omega_e(s)$. However,\n$\\pi$'s extraction of $x$ also need an $A$-permission. So, $\\pi$ starts waiting for permission for extraction of\n$x$ and simultaneously organize another infinite sequence $x'_0<x'_1 < \\dots < x'_n < \\dots$ in order to get a\nnew witness $s' > s$ as an entry stage of some $x' > x$ from this sequence. By this argument we can get an\ninfinite sequence of witnesses and the corresponding numbers prepared for extraction and waiting for\n$A$-permission. Again, one of these numbers will get an $A$-permission since $A$ is not computable. Note that an\nenumeration process doesn't depend on $\\pi$'s $\\Omega$-functional, but an extraction process does.\n\n\n{\\bfseries Basic $\\mathcal S$-strategy}. An $\\mathcal S$-strategy,\nsay $\\sigma$, tests the length agreement of its $W_e=\\Theta_e^D$,\nand if the length agreement is larger than the ones before then\n$\\sigma$ define $\\Gamma^{L(D)}_e$ as current $W_e$ up to the length\nagreement. The problem is that for some argument $m$,\n$\\Gamma^{L(D)}_e(m)$ is first defined as $W_e(m)=0$ at stage $s$,\nlater a small number is enumerated into or extracted from $D$ making\n$\\Phi_e^D(m)[t]=1$ at a bigger stage $t>s$, which allows $W_e(m)$ to\nchange.\n\nTo solve this problem, we use the following strategy. If the $W_e(m)$-change is derived from an enumeration into\n$D$, then $\\sigma$ will extract this number from $D$ to make a disagreement $\\Theta^{D}_e(m)=0\\neq 1 =W_e(m)$.\nOtherwise, $W_e(m)$-change is caused by an extraction from $D$ and the corresponding number, say $s$, is\nenumerated into $L(D)$. In this case the $L(D)$-change allows to correct $\\Gamma^{L(D)}_e(m)$.\n\nParticularly, such $W_e(m)$-change comes from a $\\mathcal\nP$-strategy enumerating a number into $D$. Formally, we illustrate\nthe process by considering an $\\mathcal S$-strategy $\\sigma$ with a\nlower priority $\\mathcal P$-strategy $\\pi \\supset\n\\sigma^{\\smallfrown}\\infty$.\n\n\nFirst, we define the length agreement functions:\n\\begin{itemize}\n  \\item $l(\\sigma, s)=\\max\\{y<s : \\forall x<y \\ (W_{e}(x)[s]=\\Theta_e^{D}(x) \\downarrow[s] )\\}$,\n\n  \\item $m(\\sigma, s)=\\text{max}\\{0, l(\\sigma, t) : t<s \\ \\ \\text{and} \\ \\ t \\ \\ \\text{is} \\ \\ \\sigma\\text{-stage}\\}$.\n\\end{itemize}\nWe say that $s$ is a $\\sigma$-expansionary stage if $s=0$ or\n$l(\\sigma, s)>m(\\sigma, s)$. Proceed to an example of simultaneous\nwork of $\\sigma$ and $\\pi$.\n\n\n\\begin{enumerate}\n\\item[($\\sigma$1)] The $\\mathcal P$-strategy $\\pi$ chooses a fresh number $x$ at stage $s_0$.\n\n\\item[($\\sigma$2)] The $\\mathcal P$-strategy $\\pi$ waits for a $\\pi$-stage $s_1>s_0$,\nwhich is also a $\\sigma$-expansionary stage, such that $l(\\sigma, s_1)>x$,\nthen puts $x$ into $D$. From now on, restrain $D\\upharpoonright s_1$ except for removing $x$.\n\n\\item[($\\sigma$3)] Wait for a $\\sigma$-expansionary stage $s_2>s_1$\nsuch that  $l(\\sigma, s_2)>x$. First, $\\sigma$ checks whether $W_{e,s_1}\\upharpoonright l(\\sigma, s_1)$ changed.\n\n\n\n\\item[($\\sigma$3.1)] If there is a $W_{e,s_1}\\upharpoonright l(\\sigma, s_1)$-change at\na number $m<l(\\sigma, s_1)$, then it must be $W_{e,s_2}(m)=1$. Now\n$\\sigma$ extracts $x$ to restore the computation $\\Theta_e^D(m)$ to\n$\\Theta_e^D(m)[s_1]=0$ and we restrain $D\\upharpoonright s_2$, this\nallows the desired disagreement $\\Theta_e^D(m)=0\\neq 1=W_e(m)$.\n\n\\item[($\\sigma$3.2)] Otherwise, no $W_{e,s_1}\\upharpoonright l(\\sigma, s_1)$-change appears\n between stages $s_1$ and $s_2$. Then $\\sigma$ takes no action on\n $x$,  and $\\pi$ waits for $\\Omega_\\pi(s_1)\\downarrow=0$.\n\n\n\\item[($\\sigma$3.2A)] If $\\Omega_\\pi(s_1)\\downarrow=0$ never happens, then $\\pi$ never extracts $x$ from $D$.\nSo, $\\sigma$ is safe from $\\pi$.\n\n\n\\item[($\\sigma$3.2B)] If $\\Omega_\\pi(s_1)\\downarrow=0$ happens and $\\pi$ does extract\n$x$ from $D$ at some stage $s_3\\geq s_2$, then the corresponding\n$s_1$ is enumerated into $L(D)$ immediately. Now, the extraction of\n$x$ may allow a $W_e$-change, say at $m$. However, this $m$ must be\ngreater than $s_2$ and $s_1$. So $\\Gamma^{L(D)}_e(m)$ is defined\nafter stage $s_2$ (so it has a bigger use $>s_1$). Hence, the\nenumeration of $s_1$ into $L(D)$ allows to automatically correct\n$\\Gamma^{L(D)}_e(m)$.\n\n\\end{enumerate}{\\itshape  Remark.} Note that a number (which is enumerated into $D$\nby $\\pi$) extraction from $D$ could be performed by some other\n$\\mathcal S$ or $\\mathcal R$-strategy between $\\pi$ and $\\sigma$.\nThis can happen only when case ($\\sigma$3.1) is false at a bigger\nstage $s>s_2$. Then it is similar to case ($\\sigma$3.2B) where any\nincorrect $\\Gamma^{L(D)}_e(m)$ is due to an extraction of some $x$\nwhich was enumerated before the stage $s_2$.\n\n\n\n{\\bfseries Basic $\\mathcal R$-strategy}. The basic idea of an\n$\\mathcal R$-strategy is similar to the one of an $\\mathcal\nS$-strategy. Roughly, an $\\mathcal R$-strategy $\\rho$ would define\n$\\Delta_e^{L(B_e)}$ computing $L(D)$ or produce a disagreement\nbetween $B_e$ and $\\Psi_e^{D}$ by extracting numbers from $D$.\nHowever, the situation here is more complicated since $L(B_e)$ is\ngiven and not controlled by us directly. Specifically, after\n$L(D)(s)$-change,  $\\rho$ can either force a corresponding\n$L(B_e)\\upharpoonright\\delta_e(s)$-change or make a successful\ndiagonalization between $B_e$ and $\\Psi_e^{D}$. To demonstrate the\nidea, we consider a process as follows.\n\nFirst of all, we define the length functions at stage $s$ by\n\n\\begin{itemize}\n  \\item $l(\\rho, s)=\\max\\{y<s : \\forall x<y  (\\Phi_e^{B_e}(x)[s]\\downarrow = D_s(x) ~\\&~ \\forall u<\\varphi_e(x,s)(\\Psi_e^D(u)[s]\\downarrow = B_{e,s}(u))) \\}$,\n  \\item $u(\\rho,s)=\\max \\{\\varphi_e(x, s)\\mid x<l(\\rho,s)\\}$,\n  \\item $m(\\rho, s)=\\text{max}\\{0, l(\\rho, t) : t<s \\ \\ \\text{and} \\ \\ t \\ \\ \\text{is an }  \\rho\\text{-stage}\\}$.\n\\end{itemize}\nWe say that $s$ is an $\\rho$-expansionary stage if $s=0$ or $l(\\rho,\ns)>m(\\rho, s)$. By $s^-$ we denote the previous expansionary stage\nbefore $s$(we will use it in the construction). Clearly, at each\n$\\rho$-expansionary stage, $z<u(\\rho,s)$ implies\n$\\Psi_e^D(z)[s]\\downarrow = B_{e,s}(z)$. Note that only $\\mathcal\nP$-strategy can enumerate numbers into $D$. So we present an\n$\\mathcal R$-strategy $\\rho$ with a lower priority $\\mathcal\nP$-strategy $\\pi\\supset\\rho^{\\smallfrown}\\infty$.\n\n\n\n\\begin{enumerate}\n\\item[($\\rho$1)] The $\\mathcal P$-strategy $\\pi$ chooses a fresh number $x$ at stage $s_0$.\n\n\\item[($\\rho$2)] The $\\mathcal P$-strategy $\\pi$ waits for a $\\pi$-stage $s_1>s_0$,\nwhich is also a $\\rho$-expansionary stage,\nsuch that $l(\\rho, s_1)>x$, then puts $x$ into $D$.\nFrom now on, restrain $D\\upharpoonright s_1$ except for removing $x$.\n\n\\item[($\\rho$3)] Wait for the $\\rho$-expansionary stage $s_2>s_1$. Then $\\Phi_e^{B_e}(x)$ changed its value between\nstages $s_1$ and $s_2$ since $0=\\Phi_e^{B_e}(x)[s_1] \\neq\n\\Phi_e^{B_e}(x)[s_2] = D(x)[s_2] = 1$. Thus, there must be some\n$y<\\varphi_e(x, s_1)$ which entered or exited $B_e$ between these\nstages.\n\n\\item[($\\rho$3.1)] If $y\\in B_{e, s_1}$ but\n$y\\not\\in B_{e, s_2}$, then $\\rho$ extracts $x$ from $D$ to restore\nthe computation $\\Psi_e^{D}(y)=1=\\Psi_e^{D}(y)[s_1]$,  from now on,\nrestrain $D\\upharpoonright s_2$. Hence we have the disagreement\n$\\Psi_e^{D}(y)=1\\neq0=B_e(y)$ since $B$ is a d.c.e. set.\n\n\\item[($\\rho$3.2)] Otherwise, $y\\not\\in B_{e, s_1}$ but\n$y\\in B_{e, s_2}$, then $\\rho$ takes no action on $x$. However,\n$\\pi$ may extract $x$ from $D$ afterward.\n\n\\item[($\\rho$3.2A)] If $\\pi$ never extracts $x$ from $D$,\nthen it does not put any number into $L(D)$. So $\\rho$ is safe from $\\pi$.\n\n\n\\item[($\\rho$3.2B)] If $\\pi$ extracts $x$ from $D$ at some stage $s_3\\geq s_2$,\nthen $s_1$ is enumerated into $L(D)$. Hence, $\\rho$ must be able to\ncorrect $\\Delta_e^{L(B_e)}(s_1)$ at the next $\\rho$-expansionary\nstage. In this case, $y$ should leave $B_e$ (otherwise, we get a\ndiagonalization), hence some number $s_1<s\\leq s_2$ should enter\n$L(B_e)$ and we use it for the correction. Note that $\\rho$ delays\nthe first definition of $\\Delta_e^{L(B_e)}(s_1)$ and define it only\nat the next $\\rho$-expansionary stage $s_2$.\n\n\\end{enumerate}{\\itshape  Remark.} Note that a number (that enumerated into $D$ by\n$\\pi$) can be extracted by some other $\\mathcal S$ or $\\mathcal\nR$-strategy between $\\pi$ and $\\rho$. This can happen only if case\n($\\rho$3.1) is false at a bigger stage $s>s_2$. Then we correct the\nvalue at point $s_1$ similar to ($\\rho$3.2B).\n\n{\\bfseries Interactions Among Strategies}. In the previous $\\mathcal S$- and $\\mathcal R$-strategies, we omitted\nthe $\\mathcal G$-requirement when $D$ changed. However, similar to $\\mathcal P$-strategy, we need an\n$A$-permission whenever $\\mathcal S$- and $\\mathcal R$-strategies make any change on $D$. Basic idea is to code\nthe latent disagreement actions at steps $(\\sigma3.1)$ and $(\\rho3.1)$ as cycles. So each cycle constructs the\ncorresponding functional $\\Gamma_{\\sigma, k}^{L(D)}$ or $\\Delta_{\\rho, k}^{ L(B_e)}$ associated with numbers\n$x_k$ for $k=0,1,2, \\dots$. At the same time, we compute $A(k)$ using computable functions $f_{\\sigma}(k)$ and\n$f_{\\rho}(k)$, respectively. As $A$ is noncomputable, the strategies $\\sigma$ and $\\rho$ eventually make\nsuccessful disagreements.\n\n\nAs we make use of direct permitting argument, it allows consecutive\n$D$-changes without any expansionary stages. By the proceeding\ndiscussion, if that is only consecutive extraction from $D$ then the\n$\\mathcal S$- and $\\mathcal R$-strategies take effect. It is also\neasy to see that pure consecutive enumeration into $D$ has no\nessential injury to the $\\mathcal S$- and $\\mathcal R$-strategies.\nIn this case, they pick out the least enumeration that causes\n$W_e$-change or $B_e$-change to process their basic strategies.\n\n\nIf the consecutive $D$-changes contains both enumeration and\nextraction, then can threaten to the basic $\\mathcal S$- and\n$\\mathcal R$-strategies that restrain $D$ at non-expansionary\nstages. Without loss of generality, we consider the following case\nwith two $\\mathcal P$-strategies $\\pi_1$ and $\\pi_2$ below an\n$\\mathcal R$-strategy $\\rho$ such that $\\rho^{\\smallfrown}\\infty\n\\subset \\pi_1\\subset \\pi_2$.\n\n\n\\begin{enumerate}\n\\item[(1)] Suppose $s_0$ is a $\\rho$-expansionary stage,\n$x$ was chosen by $\\pi_1$ and $z$ by $\\pi_2$ at some stage before $<s_0$.\n\n\\item[(2)] The $\\mathcal P$-strategy $\\pi_2$ gets $A$-permitting and extracts $z$ at stage $s_1>s_0$. Accordingly it\nenumerates the corresponding number $s^D(z) < s$ into $L(D)$.\n\n\\item[(3)] At a bigger stage $s_2>s_1$, the $\\mathcal P$-strategy $\\pi_1$ gets $A$-permitting and puts $x$ into $D$.\nFurthermore, there is no any $\\rho$-expansionary stage between $s_1$\nand $s_2$. Hence $\\rho$ still needs its restraint for $z$, but\nenumerating $x$ into $D$ we injury it (on the other hand, we cannot\ndelay the enumeration of $x$ due to the direct permitting method).\n\n\\item[(4)] At the next $\\rho$-expansionary stage $s_3>s_2$ the strategy\n$\\rho$ should correct $\\Delta_{\\rho, k}^{ L(B_e)}(s^D(z))$, which\nwas defined at some stage $s<s_1$. Now\n$\\Phi_e^{B_e}(z)[s_3]=0\\neq1=\\Phi_e^{B_e}(z)[s_0]$, and so\n$B_e\\upharpoonright \\varphi(z,s_0)$-changes. The basic $\\mathcal\nR$-strategy wants this change at some $y$ that entered $B_e$ before\nstage $s$. So $y$ should leave $B_e$ like in the case ($\\rho$3.2B).\nHowever, as $\\pi_1$ put $x$ into $D$ at $s_2<s_3$, the corresponding\n$B_e\\upharpoonright \\varphi(z,s_0)$-change could be some\n$m<\\varphi(z,s_0)$ entering $B_e$ at some stage $t\\in(s_2, s_3)$. As\na consequence, $\\rho$ cannot correct $\\Delta_{\\rho, k}^{\nL(B_e)}(s^D(z))[s]$.\n\n\\end{enumerate}\nTo solve above problem, it is adequate to avoid the enumeration like\n$\\pi_1$ performed at stage $s_2$. The basic idea is to divide the\nenumeration and extraction of $\\mathcal P$-strategy into two\nclasses. Accordingly, we arrange 2-dimensional cycle outcomes, say\n$(i,j)$, with lexicographic order priority for each $\\mathcal\nP$-strategy.\n\n\nHence the basic $\\mathcal P$-strategy is modified as follows. It has\nnumbers for an enumeration $x^+_{ij})$(we call them\n\\emph{attackers}) and numbers for an extraction $x^-_{ij})$(we call\nthem \\emph{diagonalizational witnesses}). A cycle $(i,j)$ can have\nonly one of them, moreover a diagonalizational witnesses can be\nproduced only from attackers. Generally, suppose $\\pi$ currently\nworks at cycle $(i,j)$ at stage $s_0$.\n\n\n\\begin{itemize}\n\n\\item[($\\pi$1)] First, $\\pi$ checks if it has a witness\nfor enumeration into $D$. If no, then it chooses a fresh number, say\n$x^+_{ij}$ and waits for $A(j)$-change, so initializes all lower\npriority strategies and defines $f^i_{\\pi}(j)=A(j)[s_0]$. Then $\\pi$\nstarts a new cycle $(i,j+1)$.\n\n\\item[($\\pi$2)] If $A(j)$-change appears at stage $s_1>s_0$,\nthen $\\pi$ puts $x^+_{ij}$ into $D$. Also $\\pi$ initializes all\nlower priority strategies, starts waiting for\n$\\Omega_\\pi(s^D(x_{ij}))\\downarrow=0$.\n\n\n\\item[($\\pi$3)] If $\\Omega_\\pi(s^D(x_{ij}))\\downarrow[s_2]=0$ for some $s_2>s_1$, then let $x^-_{ij}=x^+_{ij}$ be a witness for extracting from $D$.\nSo, $\\pi$ starts waiting for $A(i)$-change, initialize all lower\npriority strategies and define $f_{\\pi}(i)=A(i)[s_0]$. Now $\\pi$\nstarts a new cycle  $(i+1,0)$.\n\n\\end{itemize}\nBy this modification, if $\\pi_1$ enumerates a number then it\ninitialize all lower priority strategies. This means that $\\pi_1$\ncan only extract numbers from $D$ whenever $\\pi_2$ is alive\nsimultaneously. The same as for $\\pi_2$ can be said about $\\mathcal\nS$- and $\\mathcal R$-strategies. So the case (3) never happens now.\n\n\n\n",
            "\\emph{Outcomes.}${\\mathcal R}$- and ${\\mathcal S}$-strategies\nconsist of cycles $k$ and have outcomes $(k, \\infty)$ and $(k,\nfin)$, where $k \\in \\omega$ correspond to these cycles. For the sake\nof unifying we will use $(k, 0)$ and $(k, 1)$ instead of $(k,\n\\infty)$ and $(k, fin)$, respectively. An additional outcome $d$\ndenotes a diagonalization. The ordering is the following: $d< (0, 0)\n< (0, 1) < (1, 0) < (1, 1) < ...$. An outcome $(k, 0)$ means that we\nextend $\\Delta_{\\rho,k}^{L(B_{\\rho})}$ or\n$\\Gamma_{\\sigma,k}^{L(D)}$, where $\\rho$ is the corresponding\n${\\mathcal R}$-strategy and $\\sigma$ is the corresponding ${\\mathcal\nS}$-strategy. Since $A$ is not computable we will show that each\nsuch strategy has the greatest opened cycle $k$.\n\n\n${\\mathcal P}$-strategies consist of 2-dimensional cycles $(i,j)$\nand have outcomes $(i, j)$, where $i,j \\in \\omega$. An additional\noutcome $d$ denotes a diagonalization. The ordering is the\nfollowing: $d < (0, 0) < (0, 1) < (0, 2) < ... < (1, 0) < (1, 1) <\n(1, 2) < ... < (2, 0) < (2,1) < (2,2) ...$. The priority between\ncycles corresponds to this ordering. As in above case we argue that\neach ${\\mathcal P}$-strategy has the greatest opened cycle $(i,j)$.\n\nEach strategy $\\xi$ has a parameter $w^{-}(\\xi,k,j)$, denoting\nwhether outer cycle $k$ of $(k,j)$ is waiting for permitting (for\n${\\mathcal R}$- or ${\\mathcal S}$-strategies we assume that $j=0$ or\n$j=1$, respectively). By default it equals to 0, and when outer\ncycle $k$ of $(k,j)$ of the strategy $\\xi$ is waiting for\n$A$-permitting (namely, for $k$ entering $A$) we define it as 1.\nWhen outer cycle $k$ gets the permitting we reset $w^{-}(\\xi,k,j)$\nas 0 again. For a ${\\mathcal P}$-strategy $\\xi$ we also have\nparameter $w^{+} (\\xi, i, k)$. The idea is the same and we define\n$w^{+}(\\xi, i, k)$ as 1, when inner cycle $k$ of $(i,k)$ is waiting\nfor $A$-permitting (namely, for $k$ entering $A$).\n\n\n\\emph{The priority tree.} Let $\\Lambda = \\{ d, (i,j)\\}_{i,j \\in\n\\omega}$ be the set of outcomes with the ordering described above.\nThe tree of strategy $T$ is a subtree of $\\Lambda^{< \\omega}$. At\nlevels $3m$ we put ${\\mathcal R}$-strategies, at levels $3m+1$ we\nput ${\\mathcal S}$-strategies, and at levels $3m+2$ we put\n${\\mathcal P}$-strategies. Whenever we put a strategy on a tree we\nallow only outcomes corresponding to it.\n\n\nWe use standard definitions and notations for priority constructions\ninvolving tree of strategies. Also by $\\Phi^{X_{\\xi}}_{\\xi}$ we\ndenote $\\Phi^{X_e}_e$, where $e$ corresponds to the node $\\xi$. For\nthe sake of convenience we use Greek letters $\\rho$ for ${\\mathcal\nR}$-strategies, $\\sigma$ for ${\\mathcal S}$-strategies, and $\\pi$\nfor ${\\mathcal P}$-strategies. We will omit indices when they are\nclear from the context. Initializing a strategy we cancel all its\nwitnesses, functionals, close all its cycles, etc. When we\ninitialize a strategy which was declared as satisfied we cancel this\ndeclaration.\n\n\n\n\n",
            "\\emph{Stage $s=0$.}$D = \\varnothing$, all the strategies on $T$ are\ninitialized.\n\n\n\\emph{Stage $s+1>0$.} In a usual manner, by induction we define a\ncomputable approximation $TP_{s+1}$ of the true path $TP$ using\nsubstages $t<s$, where $TP_{s+1,t}$ is an approximation of\n$TP_{s+1}$ at substage $t$. Whenever $TP_{s+1}$ is defined we\ninitialize all nodes $\\eta \\nleq TP_{s+1}$ and proceed to the next\nstage.\n\n\nEach stage consists of two phases: in Phase 1 we check whether some node got a permitting, if the answer is\naffirmative then we go to this node immediately and work with it; in Phase 2 we work in a usual way. If we\nsucceed in Phase 1 then we skip Phase 2.\n\n\n{\\bf Phase 1.} Let $k$ be the least element enumerated into $A$ at\nstage $s+1$(w.l.o.g, we assume that only one element is enumerated\ninto $A$ at each stage). Check whether there exists a node $\\xi$\nsuch that $w^{-}(\\xi, k, j)[s] = 1$ or $w^{+} (\\xi, i, k)[s] = 1$\nfor some $j$ and $i$, correspondingly. If there is no such node then\nproceed to Phase 2. Otherwise, let $\\xi$ be the least such node.\n\n\\begin{itemize}\n\n\\item[$\\bullet$] If $w^{-}(\\xi, k, j)[s] = 1$ then $\\xi$ performs a diagonalization through\ncycle $k$ by extracting $x^{-}_{kj}$ from $D$, define $TP_{s+1}=\n\\xi$, define $w^{-}(\\xi, p,q)[s+1] = 0$ for all $p,q \\in \\omega$,\nand declare that $\\xi$ is satisfied.\n\n\\item[$\\bullet$] If $w^{-} (\\xi, k,j)[s] = 0$ but $w^{+} (\\xi, i, k)[s] = 1$\nthen enumerate the attacker $x^{+}_{ik}$ into $D$ finishing attack\nof the cycle $(i,k)$, close cycles $(i, q)$ for all $q > k$, open\ncycle $(i+1,0)$, define $x^{-}_{ik} = x^{+}_{ik}$ as a\ndiagonalization witness of outer cycle $i$, define $TP_{s+1}= \\xi$,\nand define $w^{+}(\\xi, i, q)[s+1] = 0$ for all $q \\in \\omega$.\n\n\\end{itemize}{\\bf Phase 2.} At substage $0 < t+1 < s+1$ we define $T_{s+1,t+1}$\nor $T_{s+1}$ according to the following cases (for simplicity we\ndefine $TP_{s+1,0} = \\leftthreetimes$):\n\n\n\\textbf{\\emph{Case}}$t=3m$, $T_{s+1,t}=\\rho $, an ${\\mathcal\nR}$-strategy.\n\n\nIf $\\rho$ is satisfied then define $T_{s+1,t+1}=\\rho^{\\smallfrown}\nd$ and proceed to the next substage $t+2$. Otherwise, let $k$ be the\ngreatest opened cycle for $\\rho$(if there is no such cycle then\nopen cycle $k=0$ and proceed as below). Cycle $k$ works as follows.\n\n\n\\begin{itemize}\n\n\n\\item[$\\rho1.$] If the stage $s+1$ is not $\\rho$-expansionary, then define $T_{s+1,t+1}=\\rho^{\\smallfrown}(k, fin)$\nand proceed to the next substage $t+2$.\n\n\n\\item[$\\rho2.$] Otherwise ($\\rho1$ fails), let $s^{-}$ be the previous $\\rho$-expansionary stage.\n\n\\smallskip\n\n\\item[$\\rho2.1.$] If there is some $x$ (the least and unique) and $y$ such that (1) $x < l(\\rho, s^{-})$, (2) $y < \\varphi_{\\rho}(x)[s^{-}]$, (3) $y \\in B_{\\rho}[s^{-}] - B_{\\rho}[s]$, (4) $x$\nwas enumerated after $s^{-}$ and no numbers less than $x$ was extracted from $D$ after $s^{-}$, then define\n$w^{-}(\\rho, k, 0) [s+1] = 1$ (so, $x$ starts waiting for an $A(k)$-change), define the corresponding number\n$x^{-}_{k0} =x$ as a diagonalization witness associated with $k$. Also open the next cycle $k+1$, define\n$TP_{s+1}=\\rho$ and proceed to the next stage $s+2$.\n\n\n\\item[$\\rho2.2.$] Otherwise ($\\rho1$ fails, $\\rho2.1$ fails),\n(re-)define $\\Delta^{L(B_\\rho)}_{\\rho,k}(z) = L(D)(z)$ with\n\n$\\delta_{\\rho,k}(z)[s+1]=$ $\\left\\{\n\\begin{array}{lcl}\ns+1, & \\text{if} \\ \\ \\ s^D(z)\\downarrow \\ \\ \\ \\text{and} \\ \\ \\ \\delta_{\\rho,k}(z)[s^{-}] \\uparrow, \\\\\n\\delta_{\\rho,k}(z)[s^{-}], & \\text{if} \\  s^D(z)\\downarrow \\ \\ \\ \\text{and} \\ \\ \\ \\delta_{\\rho,k}(z)[s^{-}] \\downarrow, \\\\\n0, & \\text{otherwise}\n\\end{array}\n\\right.$\n\n\\noindent where $z < s+1$, also define\n$TP_{s+1,t+1}=\\rho^{\\smallfrown}(k, \\infty)$, and proceed to the\nnext substage $t+2$.\n\n\\end{itemize}\\textbf{\\emph{Case}}$n=3m+1$, $TP_{s+1,t}=\\sigma $, an ${\\mathcal\nS}$-strategy.\n\n\nIf $\\sigma$ is satisfied then define $T_{s+1,t+1}=\\sigma^{\\smallfrown}d$ and proceed to the next substage $t+2$.\nOtherwise, let $k$ be the greatest opened cycle for $\\sigma$(if there is no such cycle then open cycle $k=0$\nand proceed as below). Cycle $k$ works as follows.\n\n\\begin{itemize}\n\n\n\\item[$\\sigma1.$] If the stage $s+1$ is not $\\sigma$-expansionary then define $T_{s+1,t+1}=\\sigma^{\\smallfrown}\n(k,fin)$ and proceed to the next substage $t+2$.\n\n\n\\item[$\\sigma2.$] Otherwise ($\\sigma1$ fails), let $s^{-}$ be the previous $\\sigma$-expansionary stage.\n\n\n\\item[$\\sigma2.1.$] If there is some $x$ (the least and unique) and $y$ such that (1) $y < l(\\sigma, s^{-})$, (2) $x < \\theta_{\\sigma}(y)[s^-]$,\n(3) $y \\in W_{\\sigma}[s+1] - W_{\\sigma}[s^{-}]$, (4) $x$ was enumerated after $s^{-}$ and no numbers less than\n$x$ was extracted from $D$ after $s^{-}$, then define $w^{-}(\\sigma, k, 0) [s+1] = 1$ (so, $x$ starts waiting\nfor an $A(k)$-change), define the corresponding number $x^{-}_{k0}=x$ as a diagonalization witness associated\nwith cycle $k$. Also open the next cycle $k+1$, define $TP_{s+1}=\\sigma$ and proceed to the next stage $s+2$.\n\n\n\\item[$\\sigma2.2.$] Otherwise ($\\sigma1$ and $\\sigma2.1$ fail),\n(re)define $\\Gamma^{L(D)}_{\\sigma,k}(z) = W(z)$ with\n$\\gamma_{\\sigma,k}(z) = s+1$ for all $z < l(\\sigma, s+1)$, define\n$TP_{s+1,t+1}=\\sigma^{\\smallfrown}(k,\\infty)$ and proceed to the\nnext substage $t+2$\n\n\n\n\\end{itemize}\\textbf{\\emph{Case}}$t=3m+2$, $T_{s+1,t}=\\pi $, a ${\\mathcal\nP}$-strategy.\n\n\nIf $\\pi$ is satisfied then define $T_{s+1,t+1}=\\rho^{\\smallfrown}d$\nand proceed to the next substage $t+2$. Otherwise, assume that\n$(k,j)$ is the greatest opened cycle (if there is no an opened cycle\nthen open cycle $(k,j)=(0,0)$ and proceed as below). Recall that\n$x^{+}_{kj}$ is the attacker for enumeration into $D$ and\n$x^{-}_{kj}$ is the diagonalization witness for extraction from $D$.\nCycle $(k,j)$ works as follows.\n\n\n\\begin{itemize}\n\n\n\\item[$\\pi1.$] If there is no attacker $x^{+}_{kj}$\nthen choose $x^{+}_{kj}$ as a ``big'' number, define $TP_{s+1}=\\pi$,\nand proceed to the next stage $s+2$.\n\n\n\\item[$\\pi2.$] Otherwise ($\\pi1$ fails), if there is an ${\\mathcal R}$-strategy\n$\\rho^{\\smallfrown}(i,\\infty) \\subset \\pi$ for some $i$ such that\n$x^{+}_{kj} > l(\\rho,s+1)$ then define $TP_{s+1}=\\pi$ and proceed to\nthe next stage $s+2$\n\n\n\\item[$\\pi3.$] Otherwise ($\\pi1-\\pi2$ fail), if $x^{+}_{kj} \\not \\in\nD[s+1]$ and $s^D(x^{+}_{kj}) \\uparrow$ then define $w^{+}(\\pi, k, j)\n[s+1]=1$ (so, inner cycle $j$ starts waiting for $A(j)$-change),\nopen cycle $(k,j+1)$, define $TP_{s+1}=\\pi$, and proceed to the next\nstage $s+2$.\n\n\n\\item[$\\pi4.$] Otherwise ($\\pi1-\\pi3$ fail), if $s^D(x^{+}_{kj})\\downarrow$ and $\\Omega(s^D(x^{+}_{kj})) [s+1]\n\\neq 0$ then define $TP_{s+1,t+1}=\\pi^{\\smallfrown}(k,j)$, and\nproceed to the next substage $t+2$.\n\n\n\\item[$\\pi5.$] Otherwise ($\\pi1-\\pi4$ fail), if $s^D(x^{+}_{kj})\\downarrow$ and $\\Omega(s^D(x^{+}_{kj})) \\downarrow[s+1] =\n0$ then define $x^{-}_{kj} = x^{+}_{kj}$ and $w^{-}(\\pi, k, j)[s+1]\n= 1$ (so, outer cycle $k$ defines its witness and starts waiting for\n$A(k)$-change), open cycle $(k+1,0)$, define $TP_{s+1}=\\pi$, and\nproceed to the next stage $s+2$.\n\n\n\\end{itemize}",
            "\nThe true path is defined as $TP={\\text{liminf}}_s TP_s$. Below we\nprove by induction that $TP$ is infinite and exists, and that each\nrequirement is satisfied by some strategy on $TP$.\n\n\n\\begin{lemma} \\label{lem1} For any $n \\in \\omega$ the following holds:\n\\end{lemma}\\begin{itemize}\n\n\n\\item[(i)] \\emph{$TP \\upharpoonright n$ is initialized finitely often,}\n\n\\item[(ii)] \\emph{$TP \\upharpoonright n$ initializes other nodes finitely often,}\n\n\\item[(iii)] \\emph{there exists ${\\text{liminf}}_s TP_s \\upharpoonright (n+1)$.}\n\n\\end{itemize}\\begin{proof} We use an inductive argument to prove this lemma. If\n$n=0$ then, clearly, $TP \\upharpoonright 0 = \\leftthreetimes$\nexists, is visited infinitely often and no other strategies\ninitialize it. So, (i) holds. For $n=0$, it is a case of an\n${\\mathcal R}$-strategy which can initialize other nodes only in\nPhase 1 or in case $\\rho2.1.$ of Phase 2. After an action in Phase 1\nthe strategy is satisfied and doesn't initialize other strategies.\nNow consider case $\\rho2.1.$ of Phase 2 and assume that it happens\ninfinitely often. This means that infinitely many cycles are opened\nand that each cycle $k$ has $w^{-}(\\leftthreetimes, k, 0) = 1$\neventually. Let $s_k$ be the least stage such that\n$w^{-}(\\leftthreetimes, k, 0)[s_k] =1$ and cycle $k+1$ is opened at\nthis stage, then $A(k) = A_{s_k}(k)$. Hence $A$ is computable, a\ncontradiction. This proves (ii). Moreover, we proved that\n$\\leftthreetimes$ has a greatest opened cycle, hence there exists\n${\\text{liminf}}_s TP_s (0) = {\\text{liminf}}_s TP_s \\upharpoonright\n1 = TP \\upharpoonright 1$ and (iii) is proved.\n\n\nFor inductive step, we assume that (i)-(iii) hold for $i \\leq n$.\nClearly, $TP \\upharpoonright (n+1)$ exists and is visited infinitely\noften since we have (iii) by induction. By (ii) we fix a stage $s_0$\nsuch $TP \\upharpoonright n$ doesn't initialize other nodes and is\nnot initialized by other nodes after $s_0$. Since $TP\n\\upharpoonright (n+1)$ is on the True path the nodes to the left of\nit will be visited only finitely many times. So, fix a stage $s_1 >\ns_0$ such that this situation will not happen. From then on, $TP\n\\upharpoonright (n+1)$ cannot be initialized in Phase 1 or Phase 2\nby other nodes. So, (i) holds for $n+1$.\n\n\nFurther, we work at stages $>s_1$ and proceed to the proof of (ii)\nand (iii). Consider the cases when $TP \\upharpoonright (n+1)$\ncorrespond to ${\\mathcal R}$-, ${\\mathcal S}$- and ${\\mathcal\nP}$-strategies. If $n+1 = 3m$, then we repeat the induction basis.\n\n\nAssume that $n+1 = 3m + 1$. An ${\\mathcal S}$-strategy $\\sigma$ can\ninitialize other nodes only in Phase 1 or in case $\\sigma2.1.$ of\nPhase 2. After an action in Phase 1 the ${\\mathcal S}$-strategy is\nsatisfied and then doesn't initialize other strategies. Now we need\nconsider only case $\\sigma2.1.$ of Phase 2. Assume that it happens\ninfinitely often. This means that infinitely many cycles is opened\nand that each cycle $k$ has $w^{-}(\\sigma, k,0) = 1$ eventually.\nHence $A$ is computable (we fix a stage $s_2 > s_1$ such that Phase\n1 is never happened, and to compute $A(k)$ we wait until cycle $k+1$\nis opened after the stage $s_2$, then $A(k) = A_{k_2}(k)$), a\ncontradiction.\n\n\nAssume that $n+1 = 3m + 2$. An ${\\mathcal P}$-strategy $\\pi$ can\ninitialize other nodes only in Phase 1 or in case $\\pi1$, $\\pi2$,\n$\\pi3$, and $\\pi5$ of Phase 2. After an action in Phase 1 the\n${\\mathcal P}$-strategy is satisfied and then doesn't initialize\nother strategies. Now we need consider only the cases with Phase 2.\nFor contrary, assume that one of the mentioned cases ($\\pi1$,\n$\\pi2$, $\\pi3$, or $\\pi5$) happens infinitely often. Clearly, if\n$\\pi1$ happens infinitely often then the same holds for $\\pi2$ and\n$\\pi3$. If $\\pi3$ happens infinitely often then $\\pi5$ happens\neither finitely often or infinitely often.\n\n$\\bullet$ In the first (finite) case, there exist $i$ such that for\nall $k \\in \\omega$ cycle $(i, k)$ is opened. So, we can effectively\nwait until cycle $(i, k+1)$ becomes opened at stage $t_k > s_1$.\nHence $A(k) = A_{t_k} (k)$ and $A$ is computable, a contradiction.\n\n$\\bullet$ In the second (infinite) case, there are infinitely many\nopened cycles $(k,0)$. So we can effectively wait until cycle\n$(k+1,0)$ becomes opened at stage $t_k> s_1$. Hence $A(k) =\nA_{t_k}(k)$ and $A$ is computable, a contradiction.\n\n\nThis finishes the proof of (ii) for $n+1$. Also we proved that $TP\n\\upharpoonright n$ has the greatest opened cycle, hence there exists\n${\\text{liminf}}_s TP_s \\upharpoonright (n+1)$. So, (iii) and the\nwhole lemma are proved.\n\n\\end{proof}\\begin{lemma} \\label{lem2} For any $n \\in \\omega$ the requirements\n${\\mathcal R}_n$, ${\\mathcal S}_n$, ${\\mathcal P}_n$ are satisfied.\n\\end{lemma}\\begin{proof}  We prove that ${\\mathcal R}_n$ is satisfied by $\\rho \\in TP$,\nwhere $|\\rho| = 3n$. By Lemma \\ref{lem1} fix the least stage $s_0$ such that $\\rho$ is not initialized after it.\nIf $\\rho^{\\smallfrown}d \\in TP$ or $\\rho$ has finitely many expansionary stages then ${\\mathcal R}_n$ is\nsatisfied vacuously. Otherwise, let $k$ be the greatest opened cycle of $\\rho$ after the stage $s_0$, so we\nprove that $L(D) = \\Delta_{\\rho,k}^{L(B_n)}$.\n\nNote that $\\delta_{\\rho,k}$ is well-defined (see case $\\rho2.2$ of\nthe construction). For the functional, consider the non-trivial case\nwhen $x$ was an attacker of some $\\pi \\supset \\rho^{\\smallfrown}(k,\n\\infty)$ and $s^D(x)$ is defined. Let $s_1$ be a $\\rho$-expansionary\nstage when we defined $L(D) (s^D(x)) [s_1] =\n\\Delta_{\\rho,k}^{L(B_n)}(s^D(x)) [s_1] = 0$. There are two cases.\n\n\\begin{itemize}\n\n\\item[Case(1)] There exists a $\\rho$-expansionary stage $s_2 > s_1$ such that $s^D(x) \\in L(D)\n[s_2]$. So, $x$ got $A$-permitting and later only numbers $<x$ could\nget an $A$-permitting between $s_1$ and $s_2$. Consider the\nfollowing cases which can happen between these stages:\n\n\n\\item[$(1.1)$] There wasn't a Phase 1. When we defined $\\Delta_{\\rho,k}^{L(B_n)}(s^D(x)) [s_1] =\n0$ we got $\\delta_{\\rho,k}^{L(B_n)}(s^D(x))=s_1$. Also between\nstages $s^D(x) < s_2$ no other numbers $<x$ got $A$-permitting\n(otherwise $\\pi$ (or some $\\mathcal S$- or $\\mathcal R$- strategy\nbelow $\\pi$ which got this $x$) never extracts $x$ from $D$). So, at\nstage $s_1$ we have some $y \\in B_n[s_1] - B_n[s_1^{-}]$ such that\n$y < \\varphi_n (x)[s_1^{-}]$, where $s_1^{-}$ is the previous\n$\\rho$-expansionary stage. Moreover, $D [s_1^{-}] \\upharpoonright r\n= D [s_2] \\upharpoonright r$, where $r = \\psi_n(y)[s_1^{-}]$.\nTherefore $B_n(y) [s_2] = B_n(y)[s_1^{-}]$, but this means that\n$L(B_n) \\upharpoonright s_1 $ changed because of $s^{B_n}(y) < s_1$.\nHence $L(D)(s^D(x)) [s_2] = \\Delta_{\\rho,k}^{L(B_n)}(s^D(x)) [s_2] =\n1$ is the final value.\n\n\n\n\\item[$(1.2)$] Between $\\rho^{\\smallfrown}(k, \\infty)$ and $\\pi$ it was Phase 1 with an\nenumeration, then it should enumerate some $x_{ik} < x$ and this\n$x_{ik}$ was waiting for $A(k)$-change, however during this waiting\nit can only circulate between cases $\\pi1$, $\\pi2$ and $\\pi3$. Hence\nwe always initialize all nodes below it, and in particular $\\pi$. So\n$\\pi$ cannot come even to its enumeration stage and this case is not\nvalid.\n\n\n\\item[$(1.3)$] Between $\\rho^{\\smallfrown}(k, \\infty)$ and $\\pi$ it was Phase 1 with an\nextraction, then it should extract some $x^{-}_{\\xi, kj} < x$,\nmoreover $s^D(x^{-}_{\\xi,kj}) < s^D(x)$. Let $\\xi$ be the least node\nwith such Phase 1. Hence $L(B_n)[s_1] \\upharpoonright\ns^D(x^{-}_{\\xi,kj})$ is changed (see 1.1) and we can redefine\n$\\Delta_{\\rho,k}^{L(B_n)}(s^D(x^{-}_{\\xi,kj}))[s_2]$ and so\n$L(D)(s^D(x)) [s_2] = \\Delta_{\\rho,k}^{L(B_n)}(s^D(x)) [s_2] = 1$.\n\n\n\\item[Case(2)] Such stage $s_2 > s_1$ doesn't exist.\n\n\\end{itemize}\n\nIn both cases, $L(D) (s^D(x)) = L(D)(s^D(x)) [s] =\n\\Delta_{\\rho,k}^{L(B_n)}(s^D(x)) [s] =\n\\Delta_{\\rho,k}^{L(B_n)}(s^D(x))$, where $s = s_2$ or $s_1$,\nrespectively.\n\nNow prove that ${\\mathcal S}_n$ is satisfied by $\\sigma \\in TP$,\nwhere $|\\sigma| = 3n+1$. By Lemma \\ref{lem1} fix the least stage\n$s_0$ such that $\\sigma$ is not initialized after $s_0$. If\n$\\sigma^{\\smallfrown}d \\in TP$ or $\\sigma$ has finitely many\nexpansionary stages then ${\\mathcal S}_n$ is satisfied vacuously.\nOtherwise, let $k$ be the greatest opened cycle of $\\sigma$ after\nthe stage $s_0$, so we prove that $W_n = \\Gamma^{L(D)}_{\\sigma,k}$.\nAssume that $\\Gamma^{L(D)}_{\\sigma, k} (y) [s_1] = W_n(y) [s_1] = 0$\nwas defined at $\\sigma$-expansionary stage $s_1 > s_0$. There are\ntwo possibilities now.\n\n\\begin{itemize}\n\n\\item[Case(1)] There exists a $\\sigma$-expansionary stage $s_2 > s_1$ such that $y \\in W_n [s_2] - W_n\n[s_1]$. Consider the following cases which can happen between these\nstages:\n\n\n\\item[(1.1)] There exists $z < \\theta_n(y)[s_1]$ such that $z \\in D[s_1] -\nD[s_2]$. Since $\\gamma_{\\sigma,k} (y) [s_1] = s_1$ by case\n$\\sigma2.2$ and $s^D(z) < s_1$, we can redefine $\\Gamma_{\\sigma,k}\n(y) [s_2] = W_n(y) [s_2] = 1$ with $\\gamma_{\\sigma,k} (y) [s_2] =\ns_2$.\n\n\n\\item[(1.2)] Case (1.1) doesn't hold and there exists $z < \\theta_n(y)[s_1]$ such that $z \\in D[s_2] -\nD[s_1]$. However, according to the construction case $\\sigma2.1$ we\nmust open cycle $k+1$, a contradiction.\n\n\n\n\\item[Case(2)] Such stage $s_2 > s_1$ doesn't exist. Here we need show\nthat $\\gamma_{\\sigma, k}(y)$ is well defined. Indeed, assume that\nthere exist infinitely many $\\sigma$-expansionary stages $s_m <\ns_{m+1} < ...$ such that $z_m \\not \\in D[s_m]$ but $s^D(z_m)\n\\downarrow < s_m$. However, this means that between $\\sigma$ and the\nnode, which extracted $z_1$, there are infinitely many nodes which\ngot permitting, a contradiction.\n\n\\end{itemize}\n\nIn both cases, $W_n (y) = W_n (y) [s] = \\Gamma_{\\sigma,k}^{L(D)}(y)\n[s] = \\Gamma_{\\sigma,k}^{L(D)}(y)$, where $s = s_2$ or $s_1$,\nrespectively.\n\n\nEventually, prove that ${\\mathcal P}_n$ is satisfied by $\\pi \\in TP$, where $|\\pi| = 3n+2$. By \\ref{lem1} fix\nthe least stage $s_0$ such that $\\pi$ is not initialized after it and fix the greatest opened cycle $(i,j)$\nafter $s_0$ (henceforth, no cycle $>(i,j)$ is opened after $s_0$). If $\\pi ^{\\smallfrown}d \\in TP$ then it is\nsatisfied vacuously. Otherwise, we assume that only cycle $(i,j)$ is working after some stage $s_1 > s_0$. This\nmeans that it gets stuck at $\\pi4$, i.e. there is no a stage $s>s_1$ such that $\\Omega_n (s^D(x^{+}_{ij}))[s] =\n0$, hence it is a diagonalization by $\\Omega_n (s^D(x^{+}_{ij})) \\neq 0$ (if $A$ changes at some $k \\leq i$\nafter $s_0$ then we extract $x^{-}_{km}$, where $m$ is such that $(k, m)$ is the greatest cycle in the series\n$k$; hence $\\Omega_n (s^D(x^{-}_{km})) \\downarrow = 0 \\neq 1 = L(D)(s^D(x^{-}_{km}))$ and $\\pi ^{\\smallfrown}d\n\\in TP$). This completes the proof of the lemma and the theorem.\n\n\n\\end{proof}"
        ]
    },
    "errors": []
}